"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[552],{7415:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api/yukino-client","title":"YukinoClient API","description":"The YukinoClient class is the main entry point for interacting with Yukino. It integrates with Discord.js and manages connections to Lavalink.","source":"@site/docs/api/yukino-client.md","sourceDirName":"api","slug":"/api/yukino-client","permalink":"/docs/api/yukino-client","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/api/yukino-client.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/docs/api/"},"next":{"title":"REST API","permalink":"/docs/api/rest"}}');var s=i(4848),l=i(8453);const o={},t="YukinoClient API",c={},d=[{value:"Constructor",id:"constructor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>connector</code>",id:"connector",level:3},{value:"<code>node</code>",id:"node",level:3},{value:"<code>players</code>",id:"players",level:3},{value:"<code>isReady</code>",id:"isready",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>connect()</code>",id:"connect",level:3},{value:"<code>createPlayer(options: PlayerOptions)</code>",id:"createplayeroptions-playeroptions",level:3},{value:"<code>getPlayer(guildId: string)</code>",id:"getplayerguildid-string",level:3},{value:"<code>getQueue(guildId: string)</code>",id:"getqueueguildid-string",level:3},{value:"<code>loadTrack(query: string)</code>",id:"loadtrackquery-string",level:3},{value:"<code>destroy()</code>",id:"destroy",level:3},{value:"Events",id:"events",level:2},{value:"Type Definitions",id:"type-definitions",level:2},{value:"ConnectorOptions",id:"connectoroptions",level:3},{value:"NodeOptions",id:"nodeoptions",level:3},{value:"PlayerOptions",id:"playeroptions",level:3},{value:"TypeScript Integration",id:"typescript-integration",level:2},{value:"Debug Mode",id:"debug-mode",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"yukinoclient-api",children:"YukinoClient API"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"YukinoClient"})," class is the main entry point for interacting with Yukino. It integrates with Discord.js and manages connections to Lavalink."]}),"\n",(0,s.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"constructor(client: Client, options: ConnectorOptions, nodeOptions: NodeOptions)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client"}),": Discord.js Client instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"options"}),": ",(0,s.jsx)(n.a,{href:"#connector-options",children:"ConnectorOptions"})," for configuring the connection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nodeOptions"}),": ",(0,s.jsx)(n.a,{href:"#node-options",children:"NodeOptions"})," for configuring the Lavalink node"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Client } from 'discord.js';\r\nimport { YukinoClient } from 'yukino';\r\n\r\nconst client = new Client({...});\r\nconst yukino = new YukinoClient(client, {\r\n  client,\r\n  auth: 'your-password',\r\n  debug: true\r\n}, {\r\n  name: 'main',\r\n  url: 'localhost:2333',\r\n  auth: 'your-password'\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"connector",children:(0,s.jsx)(n.code,{children:"connector"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Type: ",(0,s.jsx)(n.code,{children:"Connector"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: The connector instance used for voice state management"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"node",children:(0,s.jsx)(n.code,{children:"node"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Type: ",(0,s.jsx)(n.code,{children:"Node"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: The Lavalink node instance"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"players",children:(0,s.jsx)(n.code,{children:"players"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Type: ",(0,s.jsx)(n.code,{children:"Map<string, Player>"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Map of all active players, keyed by guild ID"}),"\n",(0,s.jsx)(n.li,{children:"Read-only"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"isready",children:(0,s.jsx)(n.code,{children:"isReady"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Type: ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Whether the Lavalink node is connected and ready"}),"\n",(0,s.jsx)(n.li,{children:"Read-only"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"connect",children:(0,s.jsx)(n.code,{children:"connect()"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"void"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Connects to the Lavalink node"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"yukino.connect();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"createplayeroptions-playeroptions",children:(0,s.jsx)(n.code,{children:"createPlayer(options: PlayerOptions)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"Player"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Creates a new player for a guild"}),"\n",(0,s.jsx)(n.li,{children:"Throws: Error if node is not ready"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const player = yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id',\r\n  textChannelId: 'text-channel-id'\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getplayerguildid-string",children:(0,s.jsx)(n.code,{children:"getPlayer(guildId: string)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"Player | undefined"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Gets an existing player for a guild"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const player = yukino.getPlayer('guild-id');\r\nif (player) {\r\n  await player.play({...});\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getqueueguildid-string",children:(0,s.jsx)(n.code,{children:"getQueue(guildId: string)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"Queue | undefined"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Gets the queue for a guild's player"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const queue = yukino.getQueue('guild-id');\r\nif (queue) {\r\n  console.log('Queue size:', queue.size);\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"loadtrackquery-string",children:(0,s.jsx)(n.code,{children:"loadTrack(query: string)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"Promise<LoadTrackResponse>"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Loads a track or playlist from a URL or search query"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const result = await yukino.loadTrack('https://youtube.com/watch?v=...');\r\nif (result.loadType === 'track') {\r\n  await player.play({ track: result.data[0] });\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"destroy",children:(0,s.jsx)(n.code,{children:"destroy()"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns: ",(0,s.jsx)(n.code,{children:"void"})]}),"\n",(0,s.jsx)(n.li,{children:"Description: Destroys all players and disconnects from Lavalink"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"yukino.destroy();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"Events are emitted through the node instance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"yukino.node.on('nodeReady', () => {\r\n  console.log('Connected to Lavalink!');\r\n});\r\n\r\nyukino.node.on('trackStart', (player, track) => {\r\n  console.log(`Now playing: ${track.info.title}`);\r\n});\r\n\r\nyukino.node.on('trackEnd', (player, track, reason) => {\r\n  console.log(`Track ended: ${track.info.title}`);\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"/docs/core/node#events",children:"Node Events"})," for a complete list of events."]}),"\n",(0,s.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,s.jsx)(n.h3,{id:"connectoroptions",children:"ConnectorOptions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface ConnectorOptions {\r\n  client: Client;\r\n  auth: string;\r\n  debug?: boolean;\r\n  name?: string;\r\n  host?: string;\r\n  port?: number | string;\r\n  url?: string;\r\n  secure?: boolean;\r\n  version?: string;\r\n  sessionId?: string;\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nodeoptions",children:"NodeOptions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface NodeOptions {\r\n  name: string;\r\n  url: string;\r\n  auth: string;\r\n  secure?: boolean;\r\n  group?: string;\r\n  reconnectInterval?: number;\r\n  reconnectTries?: number;\r\n  resumeKey?: string | null;\r\n  resumeTimeout?: number;\r\n  version?: string;\r\n  debug?: boolean;\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"playeroptions",children:"PlayerOptions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface PlayerOptions {\r\n  guildId: string;\r\n  voiceChannelId: string;\r\n  textChannelId?: string;\r\n  deaf?: boolean;\r\n  mute?: boolean;\r\n  volume?: number;\r\n  queueOptions?: QueueOptions;\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"typescript-integration",children:"TypeScript Integration"}),"\n",(0,s.jsx)(n.p,{children:"YukinoClient adds type definitions to Discord.js's Client:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"declare module 'discord.js' {\r\n  interface Client {\r\n    yukino: YukinoClient;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"When debug is enabled in the options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connection state changes are logged"}),"\n",(0,s.jsx)(n.li,{children:"Track loading information is displayed"}),"\n",(0,s.jsx)(n.li,{children:"Voice state updates are tracked"}),"\n",(0,s.jsx)(n.li,{children:"Errors are logged with stack traces"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example with debug enabled:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const yukino = new YukinoClient(client, {\r\n  client,\r\n  auth: 'password',\r\n  debug: true  // Enable debug logging\r\n}, {\r\n  name: 'main',\r\n  url: 'localhost:2333',\r\n  auth: 'password'\r\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var r=i(6540);const s={},l=r.createContext(s);function o(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);