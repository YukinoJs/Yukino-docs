"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[925],{2268:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"core/player","title":"Player","description":"A Player in Yukino manages audio playback for a specific voice channel. It handles track playback, audio filtering, and voice connection state.","source":"@site/docs/core/player.md","sourceDirName":"core","slug":"/core/player","permalink":"/docs/core/player","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/core/player.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Node","permalink":"/docs/core/node"},"next":{"title":"Queue","permalink":"/docs/core/queue"}}');var t=r(4848),l=r(8453);const o={},i="Player",s={},c=[{value:"Creating a Player",id:"creating-a-player",level:2},{value:"Playback Control",id:"playback-control",level:2},{value:"Basic Controls",id:"basic-controls",level:3},{value:"Track Management",id:"track-management",level:3},{value:"Playback Information",id:"playback-information",level:3},{value:"Queue Management",id:"queue-management",level:2},{value:"Basic Queue Operations",id:"basic-queue-operations",level:3},{value:"Queue Manipulation",id:"queue-manipulation",level:3},{value:"Loop Modes",id:"loop-modes",level:3},{value:"Audio Effects",id:"audio-effects",level:2},{value:"Volume Control",id:"volume-control",level:3},{value:"Filters",id:"filters",level:3},{value:"Voice Connection",id:"voice-connection",level:2},{value:"Voice State Management",id:"voice-state-management",level:3},{value:"Voice Events",id:"voice-events",level:3},{value:"Event Handling",id:"event-handling",level:2},{value:"Playback Events",id:"playback-events",level:3},{value:"State Events",id:"state-events",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Player Options",id:"custom-player-options",level:3},{value:"Playback Statistics",id:"playback-statistics",level:3},{value:"Resource Management",id:"resource-management",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"player",children:"Player"})}),"\n",(0,t.jsx)(n.p,{children:"A Player in Yukino manages audio playback for a specific voice channel. It handles track playback, audio filtering, and voice connection state."}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-player",children:"Creating a Player"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Basic player creation\r\nconst player = await yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id'\r\n});\r\n\r\n// Player with additional options\r\nconst player = await yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id',\r\n  textChannelId: 'text-channel-id',\r\n  selfDeaf: true,\r\n  selfMute: false,\r\n  volume: 100\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"playback-control",children:"Playback Control"}),"\n",(0,t.jsx)(n.h3,{id:"basic-controls",children:"Basic Controls"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Start playing\r\nawait player.play();\r\n\r\n// Pause/Resume\r\nawait player.pause();\r\nawait player.resume();\r\n\r\n// Stop\r\nawait player.stop();\r\n\r\n// Destroy (cleanup)\r\nawait player.destroy();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"track-management",children:"Track Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Play specific track\r\nawait player.play({ track: trackData });\r\n\r\n// Skip current track\r\nawait player.skip();\r\n\r\n// Seek to position\r\nawait player.seek(60000); // Seek to 1 minute\r\n\r\n// Set volume (0-1000)\r\nawait player.setVolume(100);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"playback-information",children:"Playback Information"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get current track\r\nconst track = player.current;\r\nconsole.log('Now playing:', track.info.title);\r\n\r\n// Get playback position\r\nconst position = player.position;\r\nconsole.log('Current position:', position);\r\n\r\n// Check playback state\r\nconsole.log('Is playing:', player.playing);\r\nconsole.log('Is paused:', player.paused);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"queue-management",children:"Queue Management"}),"\n",(0,t.jsx)(n.h3,{id:"basic-queue-operations",children:"Basic Queue Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Add tracks\r\nplayer.queue.add(track);\r\nplayer.queue.addMany([track1, track2]);\r\n\r\n// Remove tracks\r\nplayer.queue.remove(0);\r\nplayer.queue.clear();\r\n\r\n// Get queue information\r\nconsole.log('Queue length:', player.queue.length);\r\nconsole.log('Current track:', player.queue.current);\r\nconsole.log('Next track:', player.queue.next);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"queue-manipulation",children:"Queue Manipulation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Shuffle queue\r\nplayer.queue.shuffle();\r\n\r\n// Move tracks\r\nplayer.queue.move(0, 2); // Move first track to third position\r\n\r\n// Filter tracks\r\nconst filtered = player.queue.filter(track => \r\n  track.info.length < 300000 // Filter songs under 5 minutes\r\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"loop-modes",children:"Loop Modes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Set loop mode\r\nplayer.setLoop('none');    // No loop\r\nplayer.setLoop('track');   // Loop current track\r\nplayer.setLoop('queue');   // Loop entire queue\r\n\r\n// Check current loop mode\r\nconsole.log('Loop mode:', player.loop);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"audio-effects",children:"Audio Effects"}),"\n",(0,t.jsx)(n.h3,{id:"volume-control",children:"Volume Control"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Set volume (0-1000)\r\nawait player.setVolume(100);\r\n\r\n// Fade volume\r\nawait player.fade({\r\n  from: 100,\r\n  to: 50,\r\n  duration: 5000 // 5 seconds\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filters",children:"Filters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Apply single filter\r\nawait player.setFilter('equalizer', [\r\n  { band: 0, gain: 0.3 },\r\n  { band: 1, gain: 0.2 }\r\n]);\r\n\r\n// Apply multiple filters\r\nawait player.setFilters({\r\n  equalizer: [\r\n    { band: 0, gain: 0.3 },\r\n    { band: 1, gain: 0.2 }\r\n  ],\r\n  timescale: {\r\n    speed: 1.2,\r\n    pitch: 1.1,\r\n    rate: 1.0\r\n  },\r\n  tremolo: {\r\n    frequency: 2.0,\r\n    depth: 0.5\r\n  }\r\n});\r\n\r\n// Reset filters\r\nawait player.resetFilter('equalizer');\r\nawait player.resetFilters();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"voice-connection",children:"Voice Connection"}),"\n",(0,t.jsx)(n.h3,{id:"voice-state-management",children:"Voice State Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Update voice state\r\nawait player.updateVoice({\r\n  channelId: 'new-channel-id',\r\n  selfDeaf: true,\r\n  selfMute: false\r\n});\r\n\r\n// Disconnect from voice\r\nawait player.disconnect();\r\n\r\n// Reconnect to voice\r\nawait player.reconnect();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"voice-events",children:"Voice Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Voice state update\r\nplayer.on('voiceStateUpdate', (state) => {\r\n  console.log('Voice state changed:', state);\r\n});\r\n\r\n// Voice disconnected\r\nplayer.on('voiceDisconnected', (reason) => {\r\n  console.log('Disconnected:', reason);\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,t.jsx)(n.h3,{id:"playback-events",children:"Playback Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Track started\r\nplayer.on('trackStart', (track) => {\r\n  console.log('Now playing:', track.info.title);\r\n});\r\n\r\n// Track ended\r\nplayer.on('trackEnd', (track) => {\r\n  console.log('Finished playing:', track.info.title);\r\n});\r\n\r\n// Track stuck\r\nplayer.on('trackStuck', (track, thresholdMs) => {\r\n  console.warn(`Track stuck for ${thresholdMs}ms`);\r\n});\r\n\r\n// Track error\r\nplayer.on('trackError', (track, error) => {\r\n  console.error('Playback error:', error);\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"state-events",children:"State Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Player state update\r\nplayer.on('stateUpdate', (oldState, newState) => {\r\n  console.log('State changed from', oldState, 'to', newState);\r\n});\r\n\r\n// Player destroyed\r\nplayer.on('destroyed', () => {\r\n  console.log('Player cleaned up');\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"custom-player-options",children:"Custom Player Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Create player with custom options\r\nconst player = await yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id',\r\n  options: {\r\n    inactivityTimeout: 300000,  // 5 minutes\r\n    volumeDecrementer: 0.75,    // Reduce volume by 25%\r\n    bufferingTimeout: 5000      // 5 seconds buffer timeout\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"playback-statistics",children:"Playback Statistics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get detailed stats\r\nconst stats = player.stats;\r\nconsole.log('Frames sent:', stats.framesSent);\r\nconsole.log('Frames nulled:', stats.framesNulled);\r\nconsole.log('Frames deficit:', stats.framesDeficit);\r\n\r\n// Monitor frame stats\r\nplayer.on('stats', (stats) => {\r\n  if (stats.framesNulled > 100) {\r\n    console.warn('Poor connection quality');\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Clean up resources\r\nawait player.cleanup({\r\n  removeListeners: true,\r\n  destroyQueue: true\r\n});\r\n\r\n// Monitor resource usage\r\nplayer.on('debug', (message) => {\r\n  console.debug('[Player Debug]:', message);\r\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var a=r(6540);const t={},l=a.createContext(t);function o(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);