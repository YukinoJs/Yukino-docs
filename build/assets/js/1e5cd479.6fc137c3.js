"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[149],{3640:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"core/client","title":"Client","description":"The YukinoClient is the core class that manages your bot\'s connection to Lavalink and handles all audio operations.","source":"@site/docs/core/client.md","sourceDirName":"core","slug":"/core/client","permalink":"/docs/core/client","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/core/client.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start Guide","permalink":"/docs/quickstart"},"next":{"title":"Node","permalink":"/docs/core/node"}}');var l=r(4848),a=r(8453);const t={},s="Client",i={},d=[{value:"Creating a Client",id:"creating-a-client",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Required Options",id:"required-options",level:3},{value:"Optional Options",id:"optional-options",level:3},{value:"Node Management",id:"node-management",level:2},{value:"Adding Nodes",id:"adding-nodes",level:3},{value:"Node Selection",id:"node-selection",level:3},{value:"Player Management",id:"player-management",level:2},{value:"Creating Players",id:"creating-players",level:3},{value:"Getting Players",id:"getting-players",level:3},{value:"Destroying Players",id:"destroying-players",level:3},{value:"Track Loading",id:"track-loading",level:2},{value:"Loading Tracks",id:"loading-tracks",level:3},{value:"Search Options",id:"search-options",level:3},{value:"Event Handling",id:"event-handling",level:2},{value:"Node Events",id:"node-events",level:3},{value:"Track Events",id:"track-events",level:3},{value:"Voice Events",id:"voice-events",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Client Level Error Handling",id:"client-level-error-handling",level:3},{value:"Player Level Error Handling",id:"player-level-error-handling",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom REST Options",id:"custom-rest-options",level:3},{value:"Node Groups",id:"node-groups",level:3},{value:"State Management",id:"state-management",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"client",children:"Client"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"YukinoClient"})," is the core class that manages your bot's connection to Lavalink and handles all audio operations."]}),"\n",(0,l.jsx)(n.h2,{id:"creating-a-client",children:"Creating a Client"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { Client } from 'discord.js';\r\nimport { YukinoClient } from 'yukino';\r\n\r\nconst yukino = new YukinoClient(client, {\r\n  auth: 'your-password',\r\n  debug: true,\r\n  // Custom options\r\n  reconnectInterval: 5000,\r\n  reconnectTries: 3\r\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,l.jsx)(n.h3,{id:"required-options",children:"Required Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"auth"})," - The password for your Lavalink server"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"client"})," - Your Discord.js client instance"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"optional-options",children:"Optional Options"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"debug"})," - Enable debug logging (default: false)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"reconnectInterval"})," - Time between reconnect attempts in ms (default: 5000)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"reconnectTries"})," - Number of reconnect attempts (default: 3)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"defaultSearchPlatform"})," - Platform to search on when no source is specified (default: 'youtube')"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"userAgent"})," - Custom user agent for REST requests"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"node-management",children:"Node Management"}),"\n",(0,l.jsx)(n.h3,{id:"adding-nodes",children:"Adding Nodes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Add a single node\r\nyukino.addNode({\r\n  name: 'main',\r\n  url: 'localhost:2333',\r\n  auth: 'your-password',\r\n  secure: false\r\n});\r\n\r\n// Add multiple nodes\r\nyukino.addNodes([\r\n  {\r\n    name: 'node1',\r\n    url: 'node1.example.com:2333',\r\n    auth: 'password1',\r\n    secure: true\r\n  },\r\n  {\r\n    name: 'node2',\r\n    url: 'node2.example.com:2333',\r\n    auth: 'password2',\r\n    secure: true\r\n  }\r\n]);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"node-selection",children:"Node Selection"}),"\n",(0,l.jsx)(n.p,{children:"Yukino automatically selects the best node for each player based on:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Load balancing"}),"\n",(0,l.jsx)(n.li,{children:"Node status"}),"\n",(0,l.jsx)(n.li,{children:"Node penalty (calculated from CPU/memory usage)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can customize node selection:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"yukino.setNodeSelector((nodes, guildId) => {\r\n  // Custom node selection logic\r\n  return nodes.sort((a, b) => \r\n    (a.stats.cpu / a.stats.memory) - (b.stats.cpu / b.stats.memory)\r\n  )[0];\r\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"player-management",children:"Player Management"}),"\n",(0,l.jsx)(n.h3,{id:"creating-players",children:"Creating Players"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const player = await yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id',\r\n  textChannelId: 'text-channel-id', // Optional\r\n  deaf: true,  // Whether to deafen the bot\r\n  mute: false  // Whether to mute the bot\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"getting-players",children:"Getting Players"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Get a specific player\r\nconst player = yukino.getPlayer('guild-id');\r\n\r\n// Get all players\r\nconst players = yukino.players;\r\n\r\n// Check if a guild has a player\r\nconst hasPlayer = yukino.hasPlayer('guild-id');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"destroying-players",children:"Destroying Players"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Destroy a specific player\r\nawait yukino.destroyPlayer('guild-id');\r\n\r\n// Destroy all players\r\nawait yukino.destroyAllPlayers();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"track-loading",children:"Track Loading"}),"\n",(0,l.jsx)(n.h3,{id:"loading-tracks",children:"Loading Tracks"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Load a track by search query\r\nconst result = await yukino.loadTrack('never gonna give you up');\r\n\r\n// Load a track by URL\r\nconst result = await yukino.loadTrack('https://youtube.com/watch?v=dQw4w9WgXcQ');\r\n\r\n// Load a playlist\r\nconst result = await yukino.loadTrack('https://youtube.com/playlist?list=...');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"search-options",children:"Search Options"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const result = await yukino.loadTrack('your query', {\r\n  // Specify search source\r\n  source: 'youtube', // 'youtube', 'soundcloud', etc.\r\n  \r\n  // Add additional context\r\n  context: {\r\n    requester: 'user-id',\r\n    guild: 'guild-id'\r\n  }\r\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"event-handling",children:"Event Handling"}),"\n",(0,l.jsx)(n.h3,{id:"node-events",children:"Node Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Node connected\r\nyukino.node.on('nodeConnect', (node) => {\r\n  console.log(`Node ${node.name} connected`);\r\n});\r\n\r\n// Node disconnected\r\nyukino.node.on('nodeDisconnect', (node, reason) => {\r\n  console.log(`Node ${node.name} disconnected:`, reason);\r\n});\r\n\r\n// Node error\r\nyukino.node.on('nodeError', (node, error) => {\r\n  console.error(`Node ${node.name} error:`, error);\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"track-events",children:"Track Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Track started\r\nyukino.node.on('trackStart', (player, track) => {\r\n  console.log(`Playing ${track.info.title}`);\r\n});\r\n\r\n// Track ended\r\nyukino.node.on('trackEnd', (player, track) => {\r\n  console.log(`Finished ${track.info.title}`);\r\n});\r\n\r\n// Track stuck\r\nyukino.node.on('trackStuck', (player, track, thresholdMs) => {\r\n  console.warn(`Track ${track.info.title} stuck for ${thresholdMs}ms`);\r\n});\r\n\r\n// Track error\r\nyukino.node.on('trackError', (player, track, error) => {\r\n  console.error(`Error playing ${track.info.title}:`, error);\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"voice-events",children:"Voice Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Voice state update\r\nyukino.node.on('voiceStateUpdate', (state) => {\r\n  console.log('Voice state updated:', state);\r\n});\r\n\r\n// Voice server update\r\nyukino.node.on('voiceServerUpdate', (server) => {\r\n  console.log('Voice server updated:', server);\r\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.h3,{id:"client-level-error-handling",children:"Client Level Error Handling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"yukino.on('error', (error) => {\r\n  console.error('Client error:', error);\r\n});\r\n\r\nyukino.on('warn', (warning) => {\r\n  console.warn('Client warning:', warning);\r\n});\r\n\r\n// Handle specific errors\r\nyukino.on('nodeError', (node, error) => {\r\n  if (error.code === 'ECONNREFUSED') {\r\n    console.error(`Failed to connect to node ${node.name}`);\r\n  }\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"player-level-error-handling",children:"Player Level Error Handling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const player = await yukino.createPlayer({\r\n  guildId: 'guild-id',\r\n  voiceChannelId: 'channel-id'\r\n});\r\n\r\nplayer.on('error', (error) => {\r\n  console.error('Player error:', error);\r\n});\r\n\r\n// Handle track errors\r\nplayer.on('trackError', (track, error) => {\r\n  console.error(`Error playing ${track.info.title}:`, error);\r\n  // Skip to next track\r\n  player.skip().catch(console.error);\r\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,l.jsx)(n.h3,{id:"custom-rest-options",children:"Custom REST Options"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const yukino = new YukinoClient(client, {\r\n  auth: 'your-password',\r\n  rest: {\r\n    timeout: 10000,\r\n    retries: 3,\r\n    headers: {\r\n      'User-Agent': 'MyBot/1.0.0'\r\n    }\r\n  }\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"node-groups",children:"Node Groups"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Create node groups for different regions\r\nyukino.addNodes([\r\n  {\r\n    name: 'us-east',\r\n    url: 'us1.example.com:2333',\r\n    group: 'us'\r\n  },\r\n  {\r\n    name: 'us-west',\r\n    url: 'us2.example.com:2333',\r\n    group: 'us'\r\n  },\r\n  {\r\n    name: 'eu-central',\r\n    url: 'eu1.example.com:2333',\r\n    group: 'eu'\r\n  }\r\n]);\r\n\r\n// Select nodes by group\r\nyukino.setNodeSelector((nodes, guildId) => {\r\n  const guild = client.guilds.cache.get(guildId);\r\n  const region = guild.preferredLocale.includes('en-US') ? 'us' : 'eu';\r\n  \r\n  return nodes\r\n    .filter(node => node.group === region)\r\n    .sort((a, b) => a.penalties - b.penalties)[0];\r\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Get client state\r\nconsole.log('Version:', yukino.version);\r\nconsole.log('Connected:', yukino.isReady);\r\nconsole.log('Total players:', yukino.players.size);\r\nconsole.log('Total nodes:', yukino.nodes.size);\r\n\r\n// Get detailed stats\r\nconst stats = yukino.getLavaStats();\r\nconsole.log('Players:', stats.players);\r\nconsole.log('Playing players:', stats.playingPlayers);\r\nconsole.log('Uptime:', stats.uptime);\r\nconsole.log('Memory usage:', stats.memory);\r\nconsole.log('CPU usage:', stats.cpu);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var o=r(6540);const l={},a=o.createContext(l);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);