"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[915],{3387:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/rest","title":"REST API","description":"The Rest class handles HTTP communication with the Lavalink server. It provides methods for track loading, player management, and server information.","source":"@site/docs/api/rest.md","sourceDirName":"api","slug":"/api/rest","permalink":"/docs/api/rest","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/api/rest.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"YukinoClient API","permalink":"/docs/api/yukino-client"},"next":{"title":"Connectors","permalink":"/docs/api/connectors"}}');var i=n(4848),t=n(8453);const a={},o="REST API",l={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Track Loading",id:"track-loading",level:2},{value:"<code>loadTracks(identifier: string)</code>",id:"loadtracksidentifier-string",level:3},{value:"<code>decodeTrack(encodedTrack: string)</code>",id:"decodetrackencodedtrack-string",level:3},{value:"<code>encodeTrack(track: Record&lt;string, any&gt;)</code>",id:"encodetracktrack-recordstring-any",level:3},{value:"Player Management",id:"player-management",level:2},{value:"<code>updatePlayer(sessionId: string, guildId: string, data: any)</code>",id:"updateplayersessionid-string-guildid-string-data-any",level:3},{value:"<code>getPlayer(sessionId: string, guildId: string)</code>",id:"getplayersessionid-string-guildid-string",level:3},{value:"<code>getPlayers(sessionId: string)</code>",id:"getplayerssessionid-string",level:3},{value:"<code>destroyPlayer(sessionId: string, guildId: string)</code>",id:"destroyplayersessionid-string-guildid-string",level:3},{value:"Session Management",id:"session-management",level:2},{value:"<code>updateSession(sessionId: string, resumeKey: string, timeout: number)</code>",id:"updatesessionsessionid-string-resumekey-string-timeout-number",level:3},{value:"<code>getSessions()</code>",id:"getsessions",level:3},{value:"<code>getSession(sessionId: string)</code>",id:"getsessionsessionid-string",level:3},{value:"Server Information",id:"server-information",level:2},{value:"<code>version()</code>",id:"version",level:3},{value:"<code>info()</code>",id:"info",level:3},{value:"<code>stats()</code>",id:"stats",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Debug Mode",id:"debug-mode",level:2},{value:"Request Configuration",id:"request-configuration",level:2},{value:"Base Configuration",id:"base-configuration",level:3},{value:"Using HTTPS",id:"using-https",level:3},{value:"Custom Timeout",id:"custom-timeout",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"rest-api",children:"REST API"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"Rest"})," class handles HTTP communication with the Lavalink server. It provides methods for track loading, player management, and server information."]}),"\n",(0,i.jsx)(s.h2,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { Rest } from 'yukino';\r\n\r\nconst rest = new Rest({\r\n  url: 'localhost:2333',\r\n  auth: 'your-password',\r\n  secure: false,    // Use HTTPS\r\n  timeout: 15000,   // Request timeout in ms\r\n  version: '4',     // Lavalink API version\r\n  debug: false      // Enable debug logging\r\n});\n"})}),"\n",(0,i.jsx)(s.h2,{id:"track-loading",children:"Track Loading"}),"\n",(0,i.jsx)(s.h3,{id:"loadtracksidentifier-string",children:(0,i.jsx)(s.code,{children:"loadTracks(identifier: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Load tracks from URLs or search queries."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// Load from URL\r\nconst result = await rest.loadTracks('https://youtube.com/watch?v=...');\r\n\r\n// Search YouTube\r\nconst searchResult = await rest.loadTracks('ytsearch:your search query');\r\n\r\n// Handle different result types\r\nswitch (result.loadType) {\r\n  case 'track':\r\n    console.log('Single track:', result.data[0].info.title);\r\n    break;\r\n    \r\n  case 'playlist':\r\n    console.log('Playlist:', result.playlistInfo?.name);\r\n    console.log('Track count:', result.data?.length);\r\n    break;\r\n    \r\n  case 'search':\r\n    console.log('Search results:', result.data?.length);\r\n    break;\r\n    \r\n  case 'empty':\r\n    console.log('No matches found');\r\n    break;\r\n    \r\n  case 'error':\r\n    console.error('Error:', result.exception?.message);\r\n    break;\r\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"decodetrackencodedtrack-string",children:(0,i.jsx)(s.code,{children:"decodeTrack(encodedTrack: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Decode a base64 track string into track information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const trackInfo = await rest.decodeTrack('base64trackstring...');\r\nconsole.log('Track title:', trackInfo.title);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"encodetracktrack-recordstring-any",children:(0,i.jsx)(s.code,{children:"encodeTrack(track: Record<string, any>)"})}),"\n",(0,i.jsx)(s.p,{children:"Encode track information into a base64 string."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const encoded = await rest.encodeTrack({\r\n  title: 'Song Name',\r\n  author: 'Artist',\r\n  length: 180000\r\n});\n"})}),"\n",(0,i.jsx)(s.h2,{id:"player-management",children:"Player Management"}),"\n",(0,i.jsx)(s.h3,{id:"updateplayersessionid-string-guildid-string-data-any",children:(0,i.jsx)(s.code,{children:"updatePlayer(sessionId: string, guildId: string, data: any)"})}),"\n",(0,i.jsx)(s.p,{children:"Update a player's state via REST API."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"await rest.updatePlayer('session-id', 'guild-id', {\r\n  track: {\r\n    encoded: 'base64track...'\r\n  },\r\n  volume: 100,\r\n  paused: false\r\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"getplayersessionid-string-guildid-string",children:(0,i.jsx)(s.code,{children:"getPlayer(sessionId: string, guildId: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Get information about a specific player."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const player = await rest.getPlayer('session-id', 'guild-id');\r\nconsole.log('Current track:', player.track);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"getplayerssessionid-string",children:(0,i.jsx)(s.code,{children:"getPlayers(sessionId: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Get all players in a session."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const players = await rest.getPlayers('session-id');\r\nconsole.log('Active players:', players.length);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"destroyplayersessionid-string-guildid-string",children:(0,i.jsx)(s.code,{children:"destroyPlayer(sessionId: string, guildId: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Destroy a player instance."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"await rest.destroyPlayer('session-id', 'guild-id');\n"})}),"\n",(0,i.jsx)(s.h2,{id:"session-management",children:"Session Management"}),"\n",(0,i.jsx)(s.h3,{id:"updatesessionsessionid-string-resumekey-string-timeout-number",children:(0,i.jsx)(s.code,{children:"updateSession(sessionId: string, resumeKey: string, timeout: number)"})}),"\n",(0,i.jsx)(s.p,{children:"Update session configuration for resuming."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"await rest.updateSession(\r\n  'session-id',\r\n  'resume-key',\r\n  60 // Resume timeout in seconds\r\n);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"getsessions",children:(0,i.jsx)(s.code,{children:"getSessions()"})}),"\n",(0,i.jsx)(s.p,{children:"Get all active Lavalink sessions."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const sessions = await rest.getSessions();\r\nconsole.log('Active sessions:', sessions.length);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"getsessionsessionid-string",children:(0,i.jsx)(s.code,{children:"getSession(sessionId: string)"})}),"\n",(0,i.jsx)(s.p,{children:"Get information about a specific session."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const session = await rest.getSession('session-id');\r\nconsole.log('Session details:', session);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"server-information",children:"Server Information"}),"\n",(0,i.jsx)(s.h3,{id:"version",children:(0,i.jsx)(s.code,{children:"version()"})}),"\n",(0,i.jsx)(s.p,{children:"Get Lavalink server version."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const version = await rest.version();\r\nconsole.log('Lavalink version:', version);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"info",children:(0,i.jsx)(s.code,{children:"info()"})}),"\n",(0,i.jsx)(s.p,{children:"Get detailed server information."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const info = await rest.info();\r\nconsole.log('Server info:', info);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"stats",children:(0,i.jsx)(s.code,{children:"stats()"})}),"\n",(0,i.jsx)(s.p,{children:"Get server statistics."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const stats = await rest.stats();\r\nconsole.log('CPU Usage:', stats.cpu.systemLoad);\r\nconsole.log('Memory Used:', stats.memory.used);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(s.p,{children:"The REST client includes comprehensive error handling:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"try {\r\n  await rest.loadTracks('invalid://url');\r\n} catch (error) {\r\n  console.error('Status:', error.response?.status);\r\n  console.error('Message:', error.response?.data);\r\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,i.jsx)(s.p,{children:"When debug mode is enabled:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const rest = new Rest({\r\n  url: 'localhost:2333',\r\n  auth: 'password',\r\n  debug: true // Enable debug logging\r\n});\n"})}),"\n",(0,i.jsx)(s.p,{children:"You'll see detailed logs for:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"All HTTP requests and responses"}),"\n",(0,i.jsx)(s.li,{children:"Request timing information"}),"\n",(0,i.jsx)(s.li,{children:"Error details with stack traces"}),"\n",(0,i.jsx)(s.li,{children:"Decoded track information"}),"\n",(0,i.jsx)(s.li,{children:"Server status updates"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"request-configuration",children:"Request Configuration"}),"\n",(0,i.jsx)(s.h3,{id:"base-configuration",children:"Base Configuration"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const rest = new Rest({\r\n  url: 'localhost:2333',\r\n  auth: 'password',\r\n  secure: false,\r\n  timeout: 15000,\r\n  version: '4'\r\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"using-https",children:"Using HTTPS"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const rest = new Rest({\r\n  url: 'example.com:2333',\r\n  auth: 'password',\r\n  secure: true // Use HTTPS\r\n});\n"})}),"\n",(0,i.jsx)(s.h3,{id:"custom-timeout",children:"Custom Timeout"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const rest = new Rest({\r\n  url: 'localhost:2333',\r\n  auth: 'password',\r\n  timeout: 30000 // 30 seconds\r\n});\n"})}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Handle rate limits gracefully:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"async function loadTrackWithRetry(identifier: string, maxRetries = 3) {\r\n  for (let i = 0; i < maxRetries; i++) {\r\n    try {\r\n      return await rest.loadTracks(identifier);\r\n    } catch (error) {\r\n      if (error.response?.status === 429) {\r\n        const retryAfter = error.response.headers['retry-after'];\r\n        await new Promise(r => setTimeout(r, retryAfter * 1000));\r\n        continue;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(s.ol,{start:"2",children:["\n",(0,i.jsx)(s.li,{children:"Process REST events properly:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"rest.processRestEvents(node, response);\n"})}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsx)(s.li,{children:"Use timeouts appropriately:"}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const rest = new Rest({\r\n  url: 'localhost:2333',\r\n  auth: 'password',\r\n  timeout: 15000 // Default\r\n});\r\n\r\n// For long operations\r\nrest.timeout = 30000;\n"})})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var r=n(6540);const i={},t=r.createContext(i);function a(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);