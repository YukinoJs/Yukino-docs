"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[976],{7879:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"intro","title":"Introduction","description":"Welcome to Yukino - a modern, feature-rich Lavalink client for Discord.js. Yukino makes it easy to add high-quality audio playback to your Discord bot with minimal setup and maximum flexibility.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Installation Guide","permalink":"/docs/installation"}}');var a=i(4848),l=i(8453);const r={},o="Introduction",s={},c=[{value:"What is Yukino?",id:"what-is-yukino",level:2},{value:"Why Yukino?",id:"why-yukino",level:2},{value:"Easy to Use",id:"easy-to-use",level:3},{value:"Feature Rich",id:"feature-rich",level:3},{value:"Type Safe",id:"type-safe",level:3},{value:"Powerful Audio Control",id:"powerful-audio-control",level:3},{value:"Queue Management",id:"queue-management",level:3},{value:"Key Concepts",id:"key-concepts",level:2},{value:"YukinoClient",id:"yukinoclient",level:3},{value:"Node",id:"node",level:3},{value:"Player",id:"player",level:3},{value:"Queue",id:"queue",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Example Bot",id:"example-bot",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,a.jsx)(n.p,{children:"Welcome to Yukino - a modern, feature-rich Lavalink client for Discord.js. Yukino makes it easy to add high-quality audio playback to your Discord bot with minimal setup and maximum flexibility."}),"\n",(0,a.jsx)(n.h2,{id:"what-is-yukino",children:"What is Yukino?"}),"\n",(0,a.jsx)(n.p,{children:"Yukino is a TypeScript library that connects your Discord.js bot to a Lavalink server, providing:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\ud83c\udfb5 High-quality audio streaming"}),"\n",(0,a.jsx)(n.li,{children:"\ud83c\udf9a\ufe0f Advanced audio filters and effects"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udcca Queue management and track control"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udd04 Automatic voice state handling"}),"\n",(0,a.jsx)(n.li,{children:"\u26a1 Excellent performance and stability"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udee1\ufe0f Full TypeScript support"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"why-yukino",children:"Why Yukino?"}),"\n",(0,a.jsx)(n.h3,{id:"easy-to-use",children:"Easy to Use"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { YukinoClient } from 'yukino';\n\n// Create a Yukino client\nconst yukino = new YukinoClient(discordClient, {\n  auth: 'your-password'\n});\n\n// Play music\nconst player = await yukino.createPlayer({\n  guildId: 'guild-id',\n  voiceChannelId: 'channel-id'\n});\n\nconst result = await yukino.loadTrack('your favorite song');\nawait player.play({ track: result.data[0] });\n"})}),"\n",(0,a.jsx)(n.h3,{id:"feature-rich",children:"Feature Rich"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Load tracks from various sources (YouTube, SoundCloud, etc.)"}),"\n",(0,a.jsx)(n.li,{children:"Apply real-time audio filters"}),"\n",(0,a.jsx)(n.li,{children:"Manage queues and playlists"}),"\n",(0,a.jsx)(n.li,{children:"Handle voice state changes automatically"}),"\n",(0,a.jsx)(n.li,{children:"Monitor track and player events"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"type-safe",children:"Type Safe"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Get full TypeScript support\ninterface PlayerOptions {\n  guildId: string;\n  voiceChannelId: string;\n  textChannelId?: string;\n}\n\nconst player = await yukino.createPlayer({\n  guildId,      // Type checked!\n  voiceChannelId // Type checked!\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"powerful-audio-control",children:"Powerful Audio Control"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Apply audio filters\nawait player.setFilters({\n  equalizer: [\n    { band: 0, gain: 0.3 },\n    { band: 1, gain: 0.2 }\n  ],\n  volume: 100,\n  timescale: {\n    speed: 1.2,\n    pitch: 1.1\n  }\n});\n\n// Control playback\nawait player.pause();\nawait player.resume();\nawait player.seek(60000); // Seek to 1 minute\n"})}),"\n",(0,a.jsx)(n.h3,{id:"queue-management",children:"Queue Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Add tracks to queue\nplayer.queue.add(track);\nplayer.queue.addMany(tracks);\n\n// Control queue\nplayer.queue.shuffle();\nplayer.queue.clear();\nplayer.queue.remove(0);\n\n// Loop modes\nplayer.setLoop('track');   // Loop current track\nplayer.setLoop('queue');   // Loop entire queue\nplayer.setLoop('none');    // Disable looping\n"})}),"\n",(0,a.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,a.jsx)(n.h3,{id:"yukinoclient",children:"YukinoClient"}),"\n",(0,a.jsx)(n.p,{children:"The main client that manages the connection to Lavalink and creates players."}),"\n",(0,a.jsx)(n.h3,{id:"node",children:"Node"}),"\n",(0,a.jsx)(n.p,{children:"Represents a connection to a Lavalink server. Handles track loading and audio processing."}),"\n",(0,a.jsx)(n.h3,{id:"player",children:"Player"}),"\n",(0,a.jsx)(n.p,{children:"Manages playback for a specific voice channel. Controls audio output and track state."}),"\n",(0,a.jsx)(n.h3,{id:"queue",children:"Queue"}),"\n",(0,a.jsx)(n.p,{children:"Handles track organization and playback order for a player."}),"\n",(0,a.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsxs)(n.p,{children:["Ready to add music to your Discord bot? Follow our ",(0,a.jsx)(n.a,{href:"./installation",children:"Installation Guide"})," to get started!"]}),"\n",(0,a.jsx)(n.h2,{id:"example-bot",children:"Example Bot"}),"\n",(0,a.jsx)(n.p,{children:"Here's a complete example of a simple music bot using Yukino:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Client, GatewayIntentBits } from 'discord.js';\nimport { YukinoClient } from 'yukino';\n\nconst client = new Client({\n  intents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildVoiceStates,\n    GatewayIntentBits.GuildMessages\n  ]\n});\n\nconst yukino = new YukinoClient(client, {\n  auth: 'your-password',\n  debug: true\n});\n\nclient.once('ready', () => {\n  console.log('Bot is ready!');\n  yukino.connect();\n});\n\nclient.on('interactionCreate', async (interaction) => {\n  if (!interaction.isCommand()) return;\n\n  switch (interaction.commandName) {\n    case 'play': {\n      const query = interaction.options.getString('song', true);\n      const voiceChannel = interaction.member.voice.channel;\n      \n      if (!voiceChannel) {\n        return interaction.reply('Join a voice channel first!');\n      }\n      \n      // Get or create player\n      const player = yukino.getPlayer(interaction.guildId) ||\n        await yukino.createPlayer({\n          guildId: interaction.guildId,\n          voiceChannelId: voiceChannel.id,\n          textChannelId: interaction.channelId\n        });\n      \n      // Search and play\n      const result = await yukino.loadTrack(query);\n      if (result.data[0]) {\n        player.queue.add(result.data[0]);\n        \n        if (!player.playing) {\n          await player.play();\n        }\n        \n        await interaction.reply(\n          `Added ${result.data[0].info.title} to the queue!`\n        );\n      }\n      break;\n    }\n    \n    case 'stop': {\n      const player = yukino.getPlayer(interaction.guildId);\n      if (player) {\n        await player.destroy();\n        await interaction.reply('Stopped playback!');\n      }\n      break;\n    }\n  }\n});\n\nclient.login('your-token');\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Follow the ",(0,a.jsx)(n.a,{href:"./installation",children:"Installation Guide"})," to set up Yukino"]}),"\n",(0,a.jsxs)(n.li,{children:["Check out the ",(0,a.jsx)(n.a,{href:"./quickstart",children:"Quick Start Guide"})," for basic usage"]}),"\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"./core/client",children:"Core Concepts"})," for in-depth understanding"]}),"\n",(0,a.jsxs)(n.li,{children:["Browse the ",(0,a.jsx)(n.a,{href:"./api",children:"API Reference"})," for detailed documentation"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const a={},l=t.createContext(a);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);