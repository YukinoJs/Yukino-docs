"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[612],{7431:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"core/node","title":"Node","description":"A Node in Yukino represents a connection to a Lavalink server. It handles track loading, audio processing, and manages the WebSocket connection to the Lavalink server.","source":"@site/docs/core/node.md","sourceDirName":"core","slug":"/core/node","permalink":"/docs/core/node","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/core/node.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Client","permalink":"/docs/core/client"},"next":{"title":"Player","permalink":"/docs/core/player"}}');var t=r(4848),a=r(8453);const s={},i="Node",c={},l=[{value:"Node Configuration",id:"node-configuration",level:2},{value:"Node States",id:"node-states",level:2},{value:"Connection Management",id:"connection-management",level:2},{value:"Manual Connection",id:"manual-connection",level:3},{value:"Auto-Reconnection",id:"auto-reconnection",level:3},{value:"Track Loading",id:"track-loading",level:2},{value:"Load Tracks",id:"load-tracks",level:3},{value:"Track Loading Response",id:"track-loading-response",level:3},{value:"Resource Management",id:"resource-management",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"CPU Management",id:"cpu-management",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Connection Errors",id:"connection-errors",level:3},{value:"Track Load Errors",id:"track-load-errors",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:2},{value:"Frame Statistics",id:"frame-statistics",level:3},{value:"Player Statistics",id:"player-statistics",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Custom REST Routes",id:"custom-rest-routes",level:3},{value:"Version Compatibility",id:"version-compatibility",level:3},{value:"Load Balancing",id:"load-balancing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"node",children:"Node"})}),"\n",(0,t.jsx)(n.p,{children:"A Node in Yukino represents a connection to a Lavalink server. It handles track loading, audio processing, and manages the WebSocket connection to the Lavalink server."}),"\n",(0,t.jsx)(n.h2,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface NodeOptions {\r\n  name: string;          // Unique identifier for the node\r\n  url: string;          // URL of the Lavalink server\r\n  auth: string;         // Password for the Lavalink server\r\n  secure?: boolean;     // Whether to use WSS/HTTPS\r\n  group?: string;       // Group identifier for region-based routing\r\n  retryAmount?: number; // Number of reconnection attempts\r\n  retryDelay?: number; // Delay between retries in milliseconds\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"node-states",children:"Node States"}),"\n",(0,t.jsx)(n.p,{children:"A node can be in one of these states:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CONNECTING"})," - Initial connection attempt"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CONNECTED"})," - Successfully connected"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DISCONNECTED"})," - Connection lost"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RECONNECTING"})," - Attempting to reconnect"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DESTROYED"})," - Node has been destroyed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"connection-management",children:"Connection Management"}),"\n",(0,t.jsx)(n.h3,{id:"manual-connection",children:"Manual Connection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Connect to a node\r\nawait node.connect();\r\n\r\n// Disconnect from a node\r\nawait node.disconnect();\r\n\r\n// Destroy a node (permanent disconnect)\r\nawait node.destroy();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"auto-reconnection",children:"Auto-Reconnection"}),"\n",(0,t.jsx)(n.p,{children:"Nodes automatically attempt to reconnect when disconnected:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Configure reconnection behavior\r\nconst node = yukino.addNode({\r\n  name: 'main',\r\n  url: 'localhost:2333',\r\n  auth: 'password',\r\n  retryAmount: 5,    // Try 5 times\r\n  retryDelay: 5000   // Wait 5 seconds between attempts\r\n});\r\n\r\n// Listen for reconnection attempts\r\nnode.on('reconnecting', (attempt) => {\r\n  console.log(`Reconnection attempt ${attempt}`);\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"track-loading",children:"Track Loading"}),"\n",(0,t.jsx)(n.h3,{id:"load-tracks",children:"Load Tracks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Load a single track\r\nconst track = await node.loadTrack('youtube:dQw4w9WgXcQ');\r\n\r\n// Load a playlist\r\nconst playlist = await node.loadTrack('youtube:PLplaylist_id');\r\n\r\n// Search for tracks\r\nconst results = await node.loadTrack('ytsearch:never gonna give you up');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"track-loading-response",children:"Track Loading Response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface LoadTrackResponse {\r\n  loadType: 'TRACK_LOADED' | 'PLAYLIST_LOADED' | 'SEARCH_RESULT' | 'NO_MATCHES' | 'LOAD_FAILED';\r\n  playlistInfo?: {\r\n    name: string;\r\n    selectedTrack: number;\r\n  };\r\n  tracks: Track[];\r\n  exception?: {\r\n    message: string;\r\n    severity: 'COMMON' | 'SUSPICIOUS' | 'FAULT';\r\n  };\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resource-management",children:"Resource Management"}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get node stats\r\nconst stats = await node.getStats();\r\nconsole.log('Memory used:', stats.memory.used);\r\nconsole.log('Memory allocated:', stats.memory.allocated);\r\nconsole.log('Memory reservable:', stats.memory.reservable);\r\n\r\n// Monitor memory usage\r\nnode.on('stats', (stats) => {\r\n  const memoryUsage = (stats.memory.used / stats.memory.allocated) * 100;\r\n  if (memoryUsage > 90) {\r\n    console.warn(`High memory usage on node ${node.name}: ${memoryUsage}%`);\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cpu-management",children:"CPU Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get CPU stats\r\nconst stats = await node.getStats();\r\nconsole.log('CPU cores:', stats.cpu.cores);\r\nconsole.log('System load:', stats.cpu.systemLoad);\r\nconsole.log('Lavalink load:', stats.cpu.lavalinkLoad);\r\n\r\n// Monitor CPU usage\r\nnode.on('stats', (stats) => {\r\n  if (stats.cpu.systemLoad > 80) {\r\n    console.warn(`High CPU usage on node ${node.name}`);\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"connection-errors",children:"Connection Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"node.on('error', (error) => {\r\n  if (error.code === 'ECONNREFUSED') {\r\n    console.error('Failed to connect to Lavalink server');\r\n  } else if (error.code === 'AUTHENTICATION_FAILED') {\r\n    console.error('Invalid password');\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"track-load-errors",children:"Track Load Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\r\n  const result = await node.loadTrack('invalid:url');\r\n} catch (error) {\r\n  if (error.loadType === 'LOAD_FAILED') {\r\n    console.error('Failed to load track:', error.exception.message);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"frame-statistics",children:"Frame Statistics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"node.on('stats', (stats) => {\r\n  // Monitor frame statistics\r\n  console.log('Frames sent:', stats.frames.sent);\r\n  console.log('Frames nulled:', stats.frames.nulled);\r\n  console.log('Frames deficit:', stats.frames.deficit);\r\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"player-statistics",children:"Player Statistics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"node.on('stats', (stats) => {\r\n  // Monitor player counts\r\n  console.log('Total players:', stats.players);\r\n  console.log('Playing players:', stats.playingPlayers);\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"custom-rest-routes",children:"Custom REST Routes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Define custom REST route\r\nnode.defineRoute({\r\n  method: 'GET',\r\n  path: '/custom/route',\r\n  handler: async () => {\r\n    // Custom logic\r\n    return { status: 'ok' };\r\n  }\r\n});\r\n\r\n// Use custom route\r\nconst response = await node.makeRequest('/custom/route');\n"})}),"\n",(0,t.jsx)(n.h3,{id:"version-compatibility",children:"Version Compatibility"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Check Lavalink version\r\nconst version = await node.getVersion();\r\nconsole.log('Lavalink version:', version);\r\n\r\n// Check version compatibility\r\nif (version.major < 3) {\r\n  console.warn('This version of Lavalink is not fully supported');\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"load-balancing",children:"Load Balancing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get node penalties\r\nconst penalties = node.penalties;\r\nconsole.log('CPU penalty:', penalties.cpu);\r\nconsole.log('Memory penalty:', penalties.memory);\r\nconsole.log('Deficit penalty:', penalties.deficit);\r\nconsole.log('Total penalty:', penalties.total);\r\n\r\n// Custom penalty calculation\r\nnode.setPenaltyProvider(() => {\r\n  const stats = node.stats;\r\n  return (stats.cpu.systemLoad * 0.6) + (stats.memory.used / stats.memory.allocated * 0.4);\r\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var o=r(6540);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);