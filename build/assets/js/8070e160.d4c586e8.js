"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[822],{8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:e},n.children)}},9575:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"quickstart","title":"Quick Start Guide","description":"This guide will help you get a basic music bot up and running with Yukino in just a few minutes.","source":"@site/docs/quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/docs/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/quickstart.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation Guide","permalink":"/docs/installation"},"next":{"title":"Client","permalink":"/docs/core/client"}}');var i=r(4848),a=r(8453);const s={},o="Quick Start Guide",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"Basic Commands",id:"basic-commands",level:2},{value:"Register Slash Commands",id:"register-slash-commands",level:2},{value:"Basic Event Handling",id:"basic-event-handling",level:2},{value:"Run the Bot",id:"run-the-bot",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"quick-start-guide",children:"Quick Start Guide"})}),"\n",(0,i.jsx)(e.p,{children:"This guide will help you get a basic music bot up and running with Yukino in just a few minutes."}),"\n",(0,i.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(e.p,{children:"Make sure you have:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Installed Yukino and Discord.js (",(0,i.jsx)(e.code,{children:"npm install yukino discord.js"}),")"]}),"\n",(0,i.jsxs)(e.li,{children:["Set up Lavalink (see ",(0,i.jsx)(e.a,{href:"./installation",children:"Installation Guide"}),")"]}),"\n",(0,i.jsx)(e.li,{children:"Created a Discord bot with required intents"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,i.jsxs)(e.p,{children:["Create a new file ",(0,i.jsx)(e.code,{children:"bot.js"})," or ",(0,i.jsx)(e.code,{children:"bot.ts"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { Client, GatewayIntentBits } from 'discord.js';\r\nimport { YukinoClient } from 'yukino';\r\n\r\n// Create Discord.js client\r\nconst client = new Client({\r\n  intents: [\r\n    GatewayIntentBits.Guilds,\r\n    GatewayIntentBits.GuildVoiceStates,\r\n    GatewayIntentBits.GuildMessages,\r\n    GatewayIntentBits.MessageContent\r\n  ]\r\n});\r\n\r\n// Create Yukino client\r\nconst yukino = new YukinoClient(client, {\r\n  auth: 'youshallnotpass', // Your Lavalink password\r\n  debug: true\r\n});\r\n\r\n// Connect when ready\r\nclient.once('ready', () => {\r\n  console.log('Bot is ready!');\r\n  yukino.connect();\r\n});\r\n\r\n// Login\r\nclient.login('YOUR_BOT_TOKEN');\n"})}),"\n",(0,i.jsx)(e.h2,{id:"basic-commands",children:"Basic Commands"}),"\n",(0,i.jsx)(e.p,{children:"Add these command handlers to your bot:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"client.on('interactionCreate', async (interaction) => {\r\n  if (!interaction.isCommand()) return;\r\n\r\n  const { commandName } = interaction;\r\n\r\n  // Play Command\r\n  if (commandName === 'play') {\r\n    const query = interaction.options.getString('song', true);\r\n    const voiceChannel = interaction.member.voice.channel;\r\n    \r\n    if (!voiceChannel) {\r\n      return interaction.reply('You need to be in a voice channel!');\r\n    }\r\n    \r\n    try {\r\n      // Get or create player\r\n      let player = yukino.getPlayer(interaction.guildId);\r\n      \r\n      if (!player) {\r\n        player = await yukino.createPlayer({\r\n          guildId: interaction.guildId,\r\n          voiceChannelId: voiceChannel.id,\r\n          textChannelId: interaction.channelId\r\n        });\r\n      }\r\n      \r\n      // Search for track\r\n      const result = await yukino.loadTrack(query);\r\n      \r\n      if (result.data.length === 0) {\r\n        return interaction.reply('No results found!');\r\n      }\r\n      \r\n      // Add to queue and play\r\n      const track = result.data[0];\r\n      player.queue.add(track);\r\n      \r\n      if (!player.playing) {\r\n        await player.play();\r\n      }\r\n      \r\n      await interaction.reply(\r\n        `Added **${track.info.title}** to the queue!`\r\n      );\r\n    } catch (error) {\r\n      console.error('Play command error:', error);\r\n      await interaction.reply('An error occurred!');\r\n    }\r\n  }\r\n  \r\n  // Pause Command\r\n  if (commandName === 'pause') {\r\n    const player = yukino.getPlayer(interaction.guildId);\r\n    \r\n    if (!player) {\r\n      return interaction.reply('Nothing is playing!');\r\n    }\r\n    \r\n    await player.pause(!player.paused);\r\n    await interaction.reply(\r\n      player.paused ? 'Paused!' : 'Resumed!'\r\n    );\r\n  }\r\n  \r\n  // Skip Command\r\n  if (commandName === 'skip') {\r\n    const player = yukino.getPlayer(interaction.guildId);\r\n    \r\n    if (!player) {\r\n      return interaction.reply('Nothing is playing!');\r\n    }\r\n    \r\n    await player.skip();\r\n    await interaction.reply('Skipped!');\r\n  }\r\n  \r\n  // Stop Command\r\n  if (commandName === 'stop') {\r\n    const player = yukino.getPlayer(interaction.guildId);\r\n    \r\n    if (!player) {\r\n      return interaction.reply('Nothing is playing!');\r\n    }\r\n    \r\n    await player.destroy();\r\n    await interaction.reply('Stopped playback!');\r\n  }\r\n  \r\n  // Queue Command\r\n  if (commandName === 'queue') {\r\n    const player = yukino.getPlayer(interaction.guildId);\r\n    \r\n    if (!player) {\r\n      return interaction.reply('Queue is empty!');\r\n    }\r\n    \r\n    const current = player.current;\r\n    const queue = player.queue.tracks;\r\n    \r\n    let response = '**Now Playing:**\\n';\r\n    response += current ? `${current.info.title}\\n\\n` : 'Nothing\\n\\n';\r\n    \r\n    if (queue.length > 0) {\r\n      response += '**Queue:**\\n';\r\n      response += queue\r\n        .slice(0, 10)\r\n        .map((track, i) => `${i + 1}. ${track.info.title}`)\r\n        .join('\\n');\r\n      \r\n      if (queue.length > 10) {\r\n        response += `\\n...and ${queue.length - 10} more`;\r\n      }\r\n    }\r\n    \r\n    await interaction.reply(response);\r\n  }\r\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"register-slash-commands",children:"Register Slash Commands"}),"\n",(0,i.jsx)(e.p,{children:"Create and register your slash commands:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { REST, Routes, SlashCommandBuilder } from 'discord.js';\r\n\r\nconst commands = [\r\n  new SlashCommandBuilder()\r\n    .setName('play')\r\n    .setDescription('Play a song')\r\n    .addStringOption(option =>\r\n      option\r\n        .setName('song')\r\n        .setDescription('Song name or URL')\r\n        .setRequired(true)\r\n    ),\r\n  new SlashCommandBuilder()\r\n    .setName('pause')\r\n    .setDescription('Pause/resume playback'),\r\n  new SlashCommandBuilder()\r\n    .setName('skip')\r\n    .setDescription('Skip current song'),\r\n  new SlashCommandBuilder()\r\n    .setName('stop')\r\n    .setDescription('Stop playback'),\r\n  new SlashCommandBuilder()\r\n    .setName('queue')\r\n    .setDescription('Show current queue')\r\n];\r\n\r\nconst rest = new REST({ version: '10' }).setToken('YOUR_BOT_TOKEN');\r\n\r\n(async () => {\r\n  try {\r\n    await rest.put(\r\n      Routes.applicationCommands('YOUR_CLIENT_ID'),\r\n      { body: commands }\r\n    );\r\n    console.log('Commands registered!');\r\n  } catch (error) {\r\n    console.error('Failed to register commands:', error);\r\n  }\r\n})();\n"})}),"\n",(0,i.jsx)(e.h2,{id:"basic-event-handling",children:"Basic Event Handling"}),"\n",(0,i.jsx)(e.p,{children:"Add basic event handlers for track events:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"yukino.node.on('trackStart', (player, track) => {\r\n  const channel = client.channels.cache.get(player.textChannelId);\r\n  if (channel?.isTextBased()) {\r\n    channel.send(`Now playing: **${track.info.title}**`);\r\n  }\r\n});\r\n\r\nyukino.node.on('trackEnd', (player, track) => {\r\n  if (player.queue.length === 0) {\r\n    const channel = client.channels.cache.get(player.textChannelId);\r\n    if (channel?.isTextBased()) {\r\n      channel.send('Queue ended!');\r\n    }\r\n  }\r\n});\r\n\r\nyukino.node.on('trackError', (player, track, error) => {\r\n  console.error('Track error:', error);\r\n  const channel = client.channels.cache.get(player.textChannelId);\r\n  if (channel?.isTextBased()) {\r\n    channel.send(`Error playing **${track.info.title}**!`);\r\n  }\r\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"run-the-bot",children:"Run the Bot"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Start Lavalink:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"java -jar Lavalink.jar\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"Start your bot:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"node bot.js\r\n# or with TypeScript\r\nts-node bot.ts\n"})}),"\n",(0,i.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(e.p,{children:"Now that you have a basic music bot running, you can:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Add more commands (volume, seek, filters, etc.)"}),"\n",(0,i.jsx)(e.li,{children:"Implement queue management features"}),"\n",(0,i.jsx)(e.li,{children:"Add error handling"}),"\n",(0,i.jsx)(e.li,{children:"Explore advanced features"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Check out these guides for more:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"./core/client",children:"Core Concepts"})," for detailed API understanding"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"./features/filters",children:"Features"})," for advanced functionality"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:"./advanced/custom-filters",children:"Advanced Topics"})," for complex use cases"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);