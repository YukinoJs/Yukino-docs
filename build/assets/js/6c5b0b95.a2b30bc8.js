"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[251],{4022:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"advanced/custom-filters","title":"Custom Filters","description":"Learn how to create and manage custom audio filters in Yukino.","source":"@site/docs/advanced/custom-filters.md","sourceDirName":"advanced","slug":"/advanced/custom-filters","permalink":"/docs/advanced/custom-filters","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/advanced/custom-filters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Effects","permalink":"/docs/features/effects"},"next":{"title":"Voice State Management","permalink":"/docs/advanced/voice-state"}}');var i=r(4848),a=r(8453);const s={},l="Custom Filters",o={},c=[{value:"Creating Custom Filter Combinations",id:"creating-custom-filter-combinations",level:2},{value:"Example Custom Filters",id:"example-custom-filters",level:3},{value:"Night Mode Filter",id:"night-mode-filter",level:4},{value:"Enhanced Vocals Filter",id:"enhanced-vocals-filter",level:4},{value:"Filter Interpolation",id:"filter-interpolation",level:2},{value:"Dynamic Filter Generation",id:"dynamic-filter-generation",level:2},{value:"Advanced Filter Management",id:"advanced-filter-management",level:2},{value:"Filter Chain System",id:"filter-chain-system",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"custom-filters",children:"Custom Filters"})}),"\n",(0,i.jsx)(e.p,{children:"Learn how to create and manage custom audio filters in Yukino."}),"\n",(0,i.jsx)(e.h2,{id:"creating-custom-filter-combinations",children:"Creating Custom Filter Combinations"}),"\n",(0,i.jsx)(e.p,{children:"You can combine multiple filters to create unique audio effects:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'interface CustomFilter {\r\n  name: string;\r\n  filters: FilterOptions;\r\n}\r\n\r\nclass CustomFilterManager {\r\n  private filters: Map<string, CustomFilter>;\r\n  \r\n  constructor() {\r\n    this.filters = new Map();\r\n  }\r\n\r\n  addFilter(name: string, filters: FilterOptions) {\r\n    this.filters.set(name, { name, filters });\r\n  }\r\n\r\n  async applyFilter(player: Player, name: string) {\r\n    const filter = this.filters.get(name);\r\n    if (!filter) throw new Error(`Filter "${name}" not found`);\r\n    \r\n    await player.setFilters(filter.filters);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"example-custom-filters",children:"Example Custom Filters"}),"\n",(0,i.jsx)(e.h4,{id:"night-mode-filter",children:"Night Mode Filter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"const filterManager = new CustomFilterManager();\r\n\r\nfilterManager.addFilter('night-mode', {\r\n  equalizer: [\r\n    { band: 0, gain: 0.3 },\r\n    { band: 1, gain: 0.3 },\r\n    { band: 2, gain: 0.2 },\r\n    { band: 3, gain: 0.1 },\r\n    { band: 4, gain: -0.1 },\r\n    { band: 5, gain: -0.2 },\r\n    { band: 6, gain: -0.3 },\r\n    { band: 7, gain: -0.3 },\r\n    { band: 8, gain: -0.3 },\r\n    { band: 9, gain: -0.3 },\r\n    { band: 10, gain: -0.2 },\r\n    { band: 11, gain: -0.2 },\r\n    { band: 12, gain: -0.2 },\r\n    { band: 13, gain: -0.1 }\r\n  ],\r\n  lowPass: {\r\n    smoothing: 15.0\r\n  }\r\n});\n"})}),"\n",(0,i.jsx)(e.h4,{id:"enhanced-vocals-filter",children:"Enhanced Vocals Filter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"filterManager.addFilter('enhanced-vocals', {\r\n  equalizer: [\r\n    { band: 0, gain: -0.2 },\r\n    { band: 1, gain: -0.2 },\r\n    { band: 2, gain: -0.1 },\r\n    { band: 3, gain: 0.0 },\r\n    { band: 4, gain: 0.3 },\r\n    { band: 5, gain: 0.4 },\r\n    { band: 6, gain: 0.4 },\r\n    { band: 7, gain: 0.3 },\r\n    { band: 8, gain: 0.0 },\r\n    { band: 9, gain: -0.1 },\r\n    { band: 10, gain: -0.2 },\r\n    { band: 11, gain: -0.2 },\r\n    { band: 12, gain: -0.3 },\r\n    { band: 13, gain: -0.3 }\r\n  ]\r\n});\n"})}),"\n",(0,i.jsx)(e.h2,{id:"filter-interpolation",children:"Filter Interpolation"}),"\n",(0,i.jsx)(e.p,{children:"Create smooth transitions between filters:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"interface InterpolationOptions {\r\n  steps?: number;\r\n  duration?: number;\r\n}\r\n\r\nasync function interpolateFilters(\r\n  player: Player,\r\n  targetFilters: FilterOptions,\r\n  options: InterpolationOptions = {}\r\n) {\r\n  const { steps = 10, duration = 500 } = options;\r\n  const stepDuration = duration / steps;\r\n  const currentFilters = player.filters;\r\n  \r\n  for (let i = 1; i <= steps; i++) {\r\n    const fraction = i / steps;\r\n    const interpolated = interpolateFilterValues(\r\n      currentFilters,\r\n      targetFilters,\r\n      fraction\r\n    );\r\n    \r\n    await player.setFilters(interpolated);\r\n    await new Promise(r => setTimeout(r, stepDuration));\r\n  }\r\n}\r\n\r\nfunction interpolateFilterValues(\r\n  current: FilterOptions,\r\n  target: FilterOptions,\r\n  fraction: number\r\n): FilterOptions {\r\n  const result: FilterOptions = {};\r\n  \r\n  // Interpolate volume\r\n  if (target.volume !== undefined) {\r\n    result.volume = lerp(\r\n      current.volume ?? 100,\r\n      target.volume,\r\n      fraction\r\n    );\r\n  }\r\n  \r\n  // Interpolate equalizer\r\n  if (target.equalizer) {\r\n    result.equalizer = target.equalizer.map((band, i) => ({\r\n      band: band.band,\r\n      gain: lerp(\r\n        current.equalizer?.[i]?.gain ?? 0,\r\n        band.gain,\r\n        fraction\r\n      )\r\n    }));\r\n  }\r\n  \r\n  // Interpolate other filters...\r\n  return result;\r\n}\r\n\r\nfunction lerp(start: number, end: number, fraction: number): number {\r\n  return start + (end - start) * fraction;\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"dynamic-filter-generation",children:"Dynamic Filter Generation"}),"\n",(0,i.jsx)(e.p,{children:"Create filters based on audio analysis:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"async function createDynamicEqualizer(\r\n  player: Player,\r\n  analysis: TrackAnalysis\r\n): Promise<EqualizerBand[]> {\r\n  const bands: EqualizerBand[] = [];\r\n  \r\n  // Example: Boost frequencies where vocals are typically present\r\n  if (analysis.hasVocals) {\r\n    bands.push(\r\n      { band: 4, gain: 0.3 }, // 160Hz\r\n      { band: 5, gain: 0.4 }, // 250Hz\r\n      { band: 6, gain: 0.4 }  // 400Hz\r\n    );\r\n  }\r\n  \r\n  // Example: Reduce bass for electronic music\r\n  if (analysis.genre === 'electronic') {\r\n    bands.push(\r\n      { band: 0, gain: -0.2 }, // 25Hz\r\n      { band: 1, gain: -0.1 }  // 40Hz\r\n    );\r\n  }\r\n  \r\n  return bands;\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-filter-management",children:"Advanced Filter Management"}),"\n",(0,i.jsx)(e.h3,{id:"filter-chain-system",children:"Filter Chain System"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"class FilterChain {\r\n  private filters: FilterOptions[] = [];\r\n  \r\n  add(filter: FilterOptions) {\r\n    this.filters.push(filter);\r\n    return this;\r\n  }\r\n  \r\n  async apply(player: Player) {\r\n    const combined = this.filters.reduce(\r\n      (acc, filter) => this.combineFilters(acc, filter),\r\n      {} as FilterOptions\r\n    );\r\n    \r\n    await player.setFilters(combined);\r\n  }\r\n  \r\n  private combineFilters(\r\n    a: FilterOptions,\r\n    b: FilterOptions\r\n  ): FilterOptions {\r\n    return {\r\n      ...a,\r\n      ...b,\r\n      equalizer: this.combineEqualizers(\r\n        a.equalizer || [],\r\n        b.equalizer || []\r\n      )\r\n    };\r\n  }\r\n  \r\n  private combineEqualizers(\r\n    a: EqualizerBand[],\r\n    b: EqualizerBand[]\r\n  ): EqualizerBand[] {\r\n    return Array(15).fill(0).map((_, i) => ({\r\n      band: i,\r\n      gain: (a.find(x => x.band === i)?.gain || 0) +\r\n            (b.find(x => x.band === i)?.gain || 0)\r\n    }));\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Validate filter values:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"function validateFilters(filters: FilterOptions): void {\r\n  if (filters.volume !== undefined) {\r\n    if (filters.volume < 0 || filters.volume > 1000) {\r\n      throw new Error('Volume must be between 0 and 1000');\r\n    }\r\n  }\r\n  \r\n  if (filters.equalizer) {\r\n    for (const band of filters.equalizer) {\r\n      if (band.gain < -0.25 || band.gain > 1.0) {\r\n        throw new Error('Equalizer gain must be between -0.25 and 1.0');\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Validate other filters...\r\n}\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"Cache filter combinations:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"class CachedFilterManager {\r\n  private cache = new Map<string, FilterOptions>();\r\n  \r\n  getFilter(name: string, generate: () => FilterOptions): FilterOptions {\r\n    if (!this.cache.has(name)) {\r\n      this.cache.set(name, generate());\r\n    }\r\n    return this.cache.get(name)!;\r\n  }\r\n}\n"})}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"Handle performance:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// Limit filter updates\r\nlet lastUpdate = 0;\r\nconst UPDATE_INTERVAL = 50; // ms\r\n\r\nasync function updateFilters(player: Player, filters: FilterOptions) {\r\n  const now = Date.now();\r\n  if (now - lastUpdate < UPDATE_INTERVAL) {\r\n    return;\r\n  }\r\n  \r\n  lastUpdate = now;\r\n  await player.setFilters(filters);\r\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>l});var t=r(6540);const i={},a=t.createContext(i);function s(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);