"use strict";(self.webpackChunkmy_docs_site=self.webpackChunkmy_docs_site||[]).push([[874],{4447:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/queue","title":"Queue","description":"The Queue system in Yukino manages the order and playback sequence of tracks. It provides features for track management, shuffling, and repeat modes.","source":"@site/docs/core/queue.md","sourceDirName":"core","slug":"/core/queue","permalink":"/docs/core/queue","draft":false,"unlisted":false,"editUrl":"https://github.com/yukino-org/yukino/tree/main/docs/docs/core/queue.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Player","permalink":"/docs/core/player"},"next":{"title":"Audio Filters","permalink":"/docs/features/filters"}}');var a=r(4848),o=r(8453);const i={},s="Queue",u={},c=[{value:"Queue Structure",id:"queue-structure",level:2},{value:"Basic Operations",id:"basic-operations",level:2},{value:"Adding Tracks",id:"adding-tracks",level:3},{value:"Removing Tracks",id:"removing-tracks",level:3},{value:"Queue Navigation",id:"queue-navigation",level:2},{value:"Track Access",id:"track-access",level:3},{value:"Queue Information",id:"queue-information",level:3},{value:"Queue Manipulation",id:"queue-manipulation",level:2},{value:"Reordering",id:"reordering",level:3},{value:"Shuffling",id:"shuffling",level:3},{value:"Loop Modes",id:"loop-modes",level:2},{value:"Setting Loop Mode",id:"setting-loop-mode",level:3},{value:"Loop Behavior",id:"loop-behavior",level:3},{value:"History Management",id:"history-management",level:2},{value:"Track History",id:"track-history",level:3},{value:"Navigation Through History",id:"navigation-through-history",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Queue Filtering",id:"queue-filtering",level:3},{value:"Queue Events",id:"queue-events",level:3},{value:"State Management",id:"state-management",level:3},{value:"Custom Sorting",id:"custom-sorting",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Memory Management",id:"memory-management",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"queue",children:"Queue"})}),"\n",(0,a.jsx)(n.p,{children:"The Queue system in Yukino manages the order and playback sequence of tracks. It provides features for track management, shuffling, and repeat modes."}),"\n",(0,a.jsx)(n.h2,{id:"queue-structure",children:"Queue Structure"}),"\n",(0,a.jsx)(n.p,{children:"A queue in Yukino has these key components:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Current track"}),"\n",(0,a.jsx)(n.li,{children:"Track history"}),"\n",(0,a.jsx)(n.li,{children:"Upcoming tracks"}),"\n",(0,a.jsx)(n.li,{children:"Loop mode"}),"\n",(0,a.jsx)(n.li,{children:"Shuffle state"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,a.jsx)(n.h3,{id:"adding-tracks",children:"Adding Tracks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Add a single track\r\nqueue.add(track);\r\n\r\n// Add multiple tracks\r\nqueue.addMany([track1, track2, track3]);\r\n\r\n// Add track at specific position\r\nqueue.add(track, { position: 2 });\r\n\r\n// Add with options\r\nqueue.add(track, {\r\n  position: 0,        // Position in queue\r\n  immediate: true,    // Play immediately\r\n  unshift: true      // Add to start of queue\r\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"removing-tracks",children:"Removing Tracks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Remove by position\r\nqueue.remove(0);\r\n\r\n// Remove range\r\nqueue.remove(0, 3); // Remove first 3 tracks\r\n\r\n// Remove by predicate\r\nqueue.remove(track => track.info.length > 600000); // Remove tracks > 10min\r\n\r\n// Clear queue\r\nqueue.clear();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"queue-navigation",children:"Queue Navigation"}),"\n",(0,a.jsx)(n.h3,{id:"track-access",children:"Track Access"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Get current track\r\nconst current = queue.current;\r\n\r\n// Get next track\r\nconst next = queue.next;\r\n\r\n// Get previous track\r\nconst previous = queue.previous;\r\n\r\n// Get track at position\r\nconst track = queue.at(2);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"queue-information",children:"Queue Information"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Get queue length\r\nconsole.log('Tracks in queue:', queue.length);\r\n\r\n// Get queue duration\r\nconsole.log('Total duration:', queue.duration);\r\n\r\n// Check if queue has tracks\r\nconsole.log('Has tracks:', queue.hasTrack);\r\nconsole.log('Is empty:', queue.isEmpty);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"queue-manipulation",children:"Queue Manipulation"}),"\n",(0,a.jsx)(n.h3,{id:"reordering",children:"Reordering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Move track\r\nqueue.move(0, 2); // Move first track to third position\r\n\r\n// Swap tracks\r\nqueue.swap(1, 3); // Swap second and fourth tracks\r\n\r\n// Reverse queue\r\nqueue.reverse();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"shuffling",children:"Shuffling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Shuffle entire queue\r\nqueue.shuffle();\r\n\r\n// Shuffle range\r\nqueue.shuffle(0, 5); // Shuffle first 5 tracks\r\n\r\n// Shuffle with options\r\nqueue.shuffle(undefined, {\r\n  startFrom: 1,     // Start shuffling from second track\r\n  preserveFirst: true // Keep first track in place\r\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"loop-modes",children:"Loop Modes"}),"\n",(0,a.jsx)(n.h3,{id:"setting-loop-mode",children:"Setting Loop Mode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Set loop mode\r\nqueue.setLoop('none');     // No looping\r\nqueue.setLoop('track');    // Loop current track\r\nqueue.setLoop('queue');    // Loop entire queue\r\n\r\n// Check current loop mode\r\nconsole.log('Loop mode:', queue.loop);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"loop-behavior",children:"Loop Behavior"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Track loop example\r\nqueue.on('trackEnd', () => {\r\n  if (queue.loop === 'track') {\r\n    // Current track will automatically replay\r\n    console.log('Replaying:', queue.current.info.title);\r\n  }\r\n});\r\n\r\n// Queue loop example\r\nqueue.on('queueEnd', () => {\r\n  if (queue.loop === 'queue') {\r\n    // Queue will automatically restart\r\n    console.log('Restarting queue');\r\n  }\r\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"history-management",children:"History Management"}),"\n",(0,a.jsx)(n.h3,{id:"track-history",children:"Track History"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Get history\r\nconst history = queue.history;\r\n\r\n// Get last played track\r\nconst lastPlayed = queue.history.last;\r\n\r\n// Get specific track from history\r\nconst trackFromHistory = queue.history.at(-2); // Second to last track\r\n\r\n// Clear history\r\nqueue.history.clear();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"navigation-through-history",children:"Navigation Through History"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Go back to previous track\r\nqueue.previous();\r\n\r\n// Go forward if available\r\nqueue.next();\r\n\r\n// Check if navigation is possible\r\nconsole.log('Can go back:', queue.canGoBack);\r\nconsole.log('Can go forward:', queue.canGoForward);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"queue-filtering",children:"Queue Filtering"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Filter tracks\r\nconst filtered = queue.filter(track => \r\n  track.info.length < 300000 // Filter songs under 5 minutes\r\n);\r\n\r\n// Find tracks\r\nconst found = queue.find(track => \r\n  track.info.title.includes('keyword')\r\n);\r\n\r\n// Map tracks\r\nconst titles = queue.map(track => track.info.title);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"queue-events",children:"Queue Events"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Track added\r\nqueue.on('trackAdd', (track, position) => {\r\n  console.log(`Added ${track.info.title} at position ${position}`);\r\n});\r\n\r\n// Track removed\r\nqueue.on('trackRemove', (track, position) => {\r\n  console.log(`Removed ${track.info.title} from position ${position}`);\r\n});\r\n\r\n// Queue shuffled\r\nqueue.on('shuffle', () => {\r\n  console.log('Queue has been shuffled');\r\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Save queue state\r\nconst state = queue.save();\r\n\r\n// Load queue state\r\nqueue.load(state);\r\n\r\n// Reset queue\r\nqueue.reset();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"custom-sorting",children:"Custom Sorting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Sort by duration\r\nqueue.sort((a, b) => a.info.length - b.info.length);\r\n\r\n// Sort by title\r\nqueue.sort((a, b) => a.info.title.localeCompare(b.info.title));\r\n\r\n// Sort with custom criteria\r\nqueue.sort((a, b) => {\r\n  const weightA = getTrackWeight(a);\r\n  const weightB = getTrackWeight(b);\r\n  return weightA - weightB;\r\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,a.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Batch add tracks\r\nqueue.transaction(() => {\r\n  tracks.forEach(track => queue.add(track));\r\n});\r\n\r\n// Batch remove tracks\r\nqueue.transaction(() => {\r\n  tracksToRemove.forEach(track => queue.remove(track));\r\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Trim history to save memory\r\nqueue.history.trim(10); // Keep only last 10 tracks\r\n\r\n// Clear unused resources\r\nqueue.cleanup();\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const a={},o=t.createContext(a);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);